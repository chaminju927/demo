buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }

        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.6.2")
    }
}

plugins {
	id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'eclipse'
}

version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'
group = 'example'


repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/google/' }
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://maven.aliyun.com/repository/spring/' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
    maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }

    mavenCentral()
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}
// run 명령으로 실행시킬 java Class 이름
//application {
//    mainClass = 'demo.example.DemoApplication'
//}



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
//	implementation "io.projectreactor:reactor-core:5.3.14"
	
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.1.2'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	 
	 implementation 'org.springframework.boot:spring-boot-starter-web'
	 implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	 
	 
     implementation 'javax.servlet:jstl'
    implementation "org.apache.tomcat.embed:tomcat-embed-jasper"
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
   compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// java 플러그인 설정으로 java 의 플러그가 있어야 정상적으로 작동
//tasks.withType(JavaCompile) {
//    options.encoding = 'UTF-8' 
    // 소스 파일을 작성할 때 사용할 자바 버전
 //   sourceCompatibility = '1.8'
    // 자바 클래스를 실행시킬 JVM의 최소 버전
 //   targetCompatibility = '1.8'
//}

bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}

//build 될 때 React 프로젝트가 먼저 build되고, 
//결과물을 SpringBoot 프로젝트 build 결과물에 포함시킨다
def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}
